#!/bin/bash


fa_file=$1
star_dir=$2
fq_dir=$3
FANTOM5=$4
threshold=$5

## Check whether variables are enough
if [[ ! -n "$fa_file" || ! -n "$star_dir" || ! -n "$fq_dir" || ! -n "$FANTOM5" || ! -n "$threshold" ]]; then
    echo "Error: no enough variable!
This script is used to  process the data generated by scCAT-seq. Fastq file is needed and the output file format is BED.
Usage:
    sh $0 <genome fa file> <STAR index> <fastq file dir> <FANTOM5 file> threshold
    # for example:
    sh $0 ~/index/hg38/hg38.fa ~/index/hg38_STAR2.7.3a_index/ ./fastq tc_hESC.bed 3
    # Caution: file in <fastq file dir> must be fastq type, not fastq.gz! Pair-end files are needed!
    "
    exit
fi









#Code in this directory is used to process the data generated by scCAT-seq, C1 CAGE, BAT-seq, etc. `Fastq` file is needed and the output file format is `BED`. Each Row represents read in corresponding position.

#Then `BED` file as input is needed to call peak using `CAGEr` R package.



# Data processing for 5' data

#The workflows of data of scCAT-seq 5', C1 CAGE, C1 STRT and Arguel et al. are similar. Here is the scCAT-seq 5' data processing workflow. To see detail imformation of other data processing, please see `C1_CAGE_5_data_processing.sh`, `C1_STRT_5_data_processing.sh` and `Arguel_et_al_5_data_processing.sh`.

#We have uploaded test data. Reader can download at [here](https://drive.google.com/open?id=1t8oLqAIWWy32yf5g3NOfKm10-i0pBITy) and [here](https://drive.google.com/open?id=1Z4xEVmkip3aq56Jp5k-0qBLmZ9oR-Lyk).

## 0. Preparation


#Before process the data, we bulid some directory and move the script to `script_and_log` and `fastq` directory:


#### Create directory
mkdir outdir/
mkdir outdir/five_prime/
mkdir outdir/five_prime/5cap_read_with_tag/
mkdir outdir/five_prime/trim_TSO/
mkdir outdir/five_prime/mapping_outdir/
mkdir outdir/five_prime/final_out/
mkdir outdir/five_prime/annote/
mkdir outdir/five_prime/collapse/


## 1. Find reads with TSO primer

#Reads with TSO primer sequence at 5' are considered to further processing. TSO primer in scCAT-seq data is `GTGGTATCAACGCAGAGTACATGGG`.


for i in `ls ${fq_dir}|grep "8N"`
do
        cat ${fq_dir}/${i} | paste - - - - | grep -E $'\t'"GTGGTATCAACGCAGAGTGCAATGAAGTCGCAGGGTTG[A|G|C|T][A|G|C|T][A|G|C|T][A|G|C|T][A|G|C|T][A|G|C|T][A|G|C|T][A|G|C|T]GGG" | awk -v FS="\t" -v OFS="\n" '{print $1, $2, $3, $4}' > outdir/five_prime/5cap_read_with_tag/${i}_with_tag.fq
done


#Output files are stored in `outdir/five_prime/5cap_read_with_tag/`.


## 2. Trim TSO primer

#To trim TSO primer, we run:


for i in `ls outdir/five_prime/5cap_read_with_tag`
do
        cutadapt -u 49 -j 40 -o outdir/five_prime/trim_TSO/${i}.trimed.remainGGG outdir/five_prime/5cap_read_with_tag/${i}
done


#In this step, we trim TSO primer.
#Output files are stored in `outdir/five_prime/trim_TSO/`.



## 3. Mapping

#For mapping, we run:


for i in `ls outdir/five_prime/trim_TSO/`
do
        STAR --runThreadN 24 --genomeDir ${star_dir} --genomeLoad LoadAndKeep --readFilesIn outdir/five_prime/trim_TSO/${i} --outFileNamePrefix outdir/five_prime/mapping_outdir/${i}_ --outSAMtype SAM --outFilterMultimapNmax 1 --outFilterScoreMinOverLread 0.6 --outFilterMatchNminOverLread 0.6
done


#Output files are stored in `outdir/five_prime/mapping_outdir/`.


## 4. remove useless file

for i in `ls outdir/five_prime/mapping_outdir |grep "sam"|grep "R1"`
do
#### The first read count
        a=$(wc -l outdir/five_prime/mapping_outdir/${i}|awk '{print $1}')
        echo ${a}

#### The second read count
        b=$(wc -l outdir/five_prime/mapping_outdir/${i%%R1*}R2.fastq_with_tag.fq.trimed.remainGGG_Aligned.out.sam|awk '{print $1}')
        echo ${b}

#### Remove useless files
        if [ ${a} -gt ${b} ]; then
                rm outdir/five_prime/mapping_outdir/${i%%R1*}R2*
        else
                rm outdir/five_prime/mapping_outdir/${i%%R1*}R1*
        fi
done




## 5 convert to bed

#As `BED` format file can be used as input for `CAGEr` R package, we convert `SAM` to `BED`:


for i in `ls outdir/five_prime/mapping_outdir | grep "sam$"`
do
#### Add header and convert to bam
        samtools view -b -T ${fa_file} outdir/five_prime/mapping_outdir/${i} | samtools view -b > outdir/five_prime/final_out/${i}_add_header.bam

#### Sort
        samtools sort outdir/five_prime/final_out/${i}_add_header.bam -o outdir/five_prime/final_out/${i}_add_header_sorted.bam

#### Build bam index for visualization
        samtools index outdir/five_prime/final_out/${i}_add_header_sorted.bam

#### Convert bam into bed
        bedtools bamtobed -i outdir/five_prime/final_out/${i}_add_header_sorted.bam > outdir/five_prime/final_out/${i}_add_header_sorted.bed
done


#Output files are stored in `outdir/five_prime/final_out/`.



## 6. Remove reads mapped to tRNA and rRNA

#Reads that mapped at tRNA and rRNA position are discarded:

for i in `ls  outdir/five_prime/final_out |grep "bed$"`
do
        bedtools subtract -a outdir/five_prime/final_out/${i} -b reference/gencode_hg38_tRNA_rRNA_gene.bed > outdir/five_prime/final_out/${i%.*}_remove_trRNA.bed
done


## 7. find barcode and UMI

for i in `ls outdir/five_prime/final_out | grep "sorted_remove_trRNA.bed$"`
do
        python2 script/annotate_UMI_v1.py -N 38 -n 8 -F ${fq_dir}/${i%%_with*} -ID outdir/five_prime/final_out/${i} -O outdir/five_prime/annote/${i}.annote
done



## 8. collapse

for i in `ls outdir/five_prime/annote | grep "annote$"`
do
        Rscript script/collapse_UMI_TSS.R  outdir/five_prime/annote/${i}
done

mv outdir/five_prime/annote/*collapse outdir/five_prime/collapse/


## 9. collapse 6 and change name

for i in `ls outdir/five_prime/collapse | grep "collapse$"`
do
        awk '{FS=" "}{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6}' outdir/five_prime/collapse/${i} > outdir/five_prime/collapse/${i}.6
        mv outdir/five_prime/collapse/${i}.6  outdir/five_prime/collapse/${i%%L3*}5_TKD.bed
done








for i in `ls outdir/five_prime/collapse | grep "TKD.bed$"`
do
	bed_file=outdir/five_prime/collapse/${i}
done

filename=${bed_file##*/}
prefix=${filename%%_TKD*}

mkdir outdir/five_prime/peakfile

#######callpeak and feature generation

## Call peak  
Rscript script/CAGE_dominant_TSS.R ${bed_file} ${threshold}


## Extract peak in gene region
bedtools intersect -s -a outdir/five_prime/peakfile/${prefix}_5cap_dominant_tss.bed -b reference/gencode_hg38_all_gene_upstream2k_and_genebody.bed -wa -wb > outdir/five_prime/peakfile/${prefix}_5cap_dominant_tss_upstream2k_and_genebody.bed


## read distribution feature generation
Rscript script/read_distribution_TSS.R outdir/five_prime/peakfile/${prefix}_5cap_dominant_tss_upstream2k_and_genebody.bed outdir/five_prime/peakfile/${prefix}_5cap_dominant_tss.bed


## Compare to FANTOM5
bedtools intersect -s -a outdir/five_prime/peakfile/temp_${prefix}_tss.bed -b ${FANTOM5} -wa -wb > outdir/five_prime/peakfile/temp_${prefix}_tss_in_FANTOM.bed
Rscript script/FANTOM.R outdir/five_prime/peakfile/tc_${prefix}_5cap.csv


## Add motif frature
python script/find_motif_re_TSS.py ${fa_file} outdir/five_prime/peakfile/tc_${prefix}_5cap_new.csv outdir/five_prime/peakfile/tc_${prefix}_5cap_new_new.csv


## Unfold motif
Rscript script/unfold_TSS.R outdir/five_prime/peakfile/tc_${prefix}_5cap_new_new.csv


## add internal feature
sh script/find_internal_TSS.sh outdir/five_prime/peakfile/tc_${prefix}_5cap_final.csv ${fa_file} reference/gencode_hg38_all_gene.bed 


