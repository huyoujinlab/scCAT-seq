#!/bin/bash

set -e

genome_fa=$1
star_dir=$2
fq_dir=$3
outdir=$4


if [[ ! -n "$genome_fa" || ! -n "$star_dir" || ! -n "$fq_dir" || ! -n "$outdir" ]]; then
    echo "Error: no enough variable!
This script is used to  process the data generated by scCAT-seq. Fastq file is needed and the output file format is BED.
Usage:
    sh $0 <genome fa file> <STAR index> <fastq file dir> <output dir>
    # for example:
    sh $0 ~/index/mm10/mm10.fa ~/index/mm10_STAR/ ~/fastq/ ~/scCAT_seq/
    # Caution: file in <fastq file dir> must be fastq type, not fastq.gz! Pair-end files are needed!
    "
    exit
fi








#Code in this directory is used to process the data generated by scCAT-seq, C1 CAGE, BAT-seq, etc. `Fastq` file is needed and the output file format is `BED`. Each Row represents read in corresponding position.

#Then `BED` file as input is needed to call peak using `CAGEr` R package.



# Data processing for 5' data

#The workflows of data of scCAT-seq 5', C1 CAGE, C1 STRT and Arguel et al. are similar. Here is the scCAT-seq 5' data processing workflow. To see detail imformation of other data processing, please see `C1_CAGE_5_data_processing.sh`, `C1_STRT_5_data_processing.sh` and `Arguel_et_al_5_data_processing.sh`.

#We have uploaded test data. Reader can download at [here](https://drive.google.com/open?id=1t8oLqAIWWy32yf5g3NOfKm10-i0pBITy) and [here](https://drive.google.com/open?id=1Z4xEVmkip3aq56Jp5k-0qBLmZ9oR-Lyk).

## 0. Preparation


#Before process the data, we bulid some directory and move the script to `script_and_log` and `fastq` directory:


#### Create directory
mkdir ${outdir}
mkdir ${outdir}/five_pirme
mkdir ${outdir}/five_pirme/5cap_read_with_tag
mkdir ${outdir}/five_pirme/trim_GTGGTATCAACGCAGAGTACAT
mkdir ${outdir}/five_pirme/mapping_output
mkdir ${outdir}/five_pirme/extract_uniquely_map
mkdir ${outdir}/five_pirme/split_plus_minus
mkdir ${outdir}/five_pirme/extract_mismatch
mkdir ${outdir}/five_pirme/final_out



## 1. Find reads with TSO primer

#Reads with TSO primer sequence at 5' are considered to further processing. TSO primer in scCAT-seq data is `GTGGTATCAACGCAGAGTACATGGG`.


for i in `ls ${fq_dir}`
do
        cat ${fq_dir}/${i} | paste - - - - | grep $'\t'"GTGGTATCAACGCAGAGTACATGGG" | awk -v FS="\t" -v OFS="\n" '{print $1, $2, $3, $4}' > ${outdir}/five_pirme/5cap_read_with_tag/${i}_with_tag.fq
done


#Output files are stored in `${outdir}/five_pirme/5cap_read_with_tag/`.


## 2. Trim TSO primer but retain GGG

#To trim TSO primer, we run:


for i in `ls ${outdir}/five_pirme/5cap_read_with_tag`
do
        cutadapt -g GTGGTATCAACGCAGAGTACAT -o ${outdir}/five_pirme/trim_GTGGTATCAACGCAGAGTACAT/${i}.trimed.remainGGG ${outdir}/five_pirme/5cap_read_with_tag/${i}
done


#In this step, we trim TSO primer. However `GGG` at the end of TSO primer was retained for further filter.

#Output files are stored in `${outdir}/five_pirme/trim_GTGGTATCAACGCAGAGTACAT/`.

## 3. Mapping

#For mapping, we run:


for i in `ls ${outdir}/five_pirme/trim_GTGGTATCAACGCAGAGTACAT/`
do
        STAR --runThreadN 24 --genomeDir ${star_dir} --genomeLoad LoadAndKeep --readFilesIn ${outdir}/five_pirme/trim_GTGGTATCAACGCAGAGTACAT/${i} --outFileNamePrefix ${outdir}/five_pirme/mapping_output/${i}_ --outSAMtype SAM --outFilterMultimapNmax 1 --outFilterScoreMinOverLread 0.6 --outFilterMatchNminOverLread 0.6
done


#Output files are stored in `${outdir}/five_pirme/mapping_output/`.

## 4. Extract uniquely mapped reads

#We only select uniquely mapped reads, so we run:


for i in `ls ${outdir}/five_pirme/mapping_output|grep "sam"`
do
        samtools view ${outdir}/five_pirme/mapping_output/${i} |grep 'NH:i:1'$'\t''' > ${outdir}/five_pirme/extract_uniquely_map/${i}_extract_uniquely_map.sam
done


#Output files are stored in `${outdir}/five_pirme/extract_uniquely_map/`.

## 5. Split reads aligned to plus stand and minus strand

#For further filter, we run:


for i in `ls ${outdir}/five_pirme/extract_uniquely_map | grep "sam"`
do
#### Extract plus strand reads
        cat ${outdir}/five_pirme/extract_uniquely_map/${i} | awk '{FS=" "}{if ($2==0 || $2==256){print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10"\t"$11"\t"$12"\t"$13"\t"$14"\t"$15}}' > ${outdir}/five_pirme/split_plus_minus/${i}_plus

#### Extract minus strand reads
        cat ${outdir}/five_pirme/extract_uniquely_map/${i} | awk '{FS=" "}{if ($2==16 || $2==272){print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10"\t"$11"\t"$12"\t"$13"\t"$14"\t"$15}}' > ${outdir}/five_pirme/split_plus_minus/${i}_minus
done


#Output files are stored in `${outdir}/five_pirme/split_plus_minus/`.

## 6. Extract reads with mismatch at 5'

#We run:


for i in `ls ${outdir}/five_pirme/split_plus_minus | grep "extract_uniquely_map.sam_plus"`
do
#### Extract plus strand reads
        python extractmismatch_plus_5.py -i ${outdir}/five_pirme/split_plus_minus/${i} -o ${outdir}/five_pirme/extract_mismatch/${i}_extractmismatch

#### Extract plus strand reads
        python extractmismatch_minus_5.py -i ${outdir}/five_pirme/split_plus_minus/${i%_*}_minus -o ${outdir}/five_pirme/extract_mismatch/${i%_*}_minus_extractmismatch

#### Combine together
        cat ${outdir}/five_pirme/extract_mismatch/${i}_extractmismatch ${outdir}/five_pirme/extract_mismatch/${i%_*}_minus_extractmismatch > ${outdir}/five_pirme/extract_mismatch/${i%_*}_extractmismatch
done


#The template-switching (TS) oligonucleotide may hybridize to the first strand cDNA due to sequence complementarity before the RT has finished polymerizing. Artifact that introduced by incomplete reverse transcription process is called strand invasion. We suppose that if "GGG" aligned, reads are strand invasion drivern artifacts. If "GGG" don't aligned, reads are derived from complete reverse transcription.

#Output files are stored in `${outdir}/five_pirme/extract_mismatch/`.

## 7. Convert SAM to BED

#As `BED` format file can be used as input for `CAGEr` R package, we convert `SAM` to `BED`:


for i in `ls ${outdir}/five_pirme/extract_mismatch | grep "sam_extractmismatch"`
do
#### Add header and convert to bam
        samtools view -b -T ${genome_fa} ${outdir}/five_pirme/extract_mismatch/${i} | samtools view -b >  ${outdir}/five_pirme/final_out/${i}_add_header.bam

#### Sort
        samtools sort ${outdir}/five_pirme/final_out/${i}_add_header.bam -o ${outdir}/five_pirme/final_out/${i}_add_header_sorted.bam

#### Build bam index for visualization
        samtools index ${outdir}/five_pirme/final_out/${i}_add_header_sorted.bam

#### Convert bam into bed
        bedtools bamtobed -i ${outdir}/five_pirme/final_out/${i}_add_header_sorted.bam > ${outdir}/five_pirme/final_out/${i}_add_header_sorted.bed
done


#Output files are stored in `${outdir}/five_pirme/final_out/`.


## 8. Remove useless reads

#As the library is pair-end reads, we remove one side which doesn't contain TSS information:


for i in `ls ${outdir}/five_pirme/final_out |grep "bed"|grep "L1_1"`
do
#### The first read count
        a=$(wc -l ${outdir}/five_pirme/final_out/${i}|awk '{print $1}')
        echo ${a}

#### The second read count
        b=$(wc -l ${outdir}/five_pirme/final_out/${i%%L1_1*}L1_2.fq_with_tag.fq.trimed.remainGGG_Aligned.out.sam_extract_uniquely_map.sam_extractmismatch_add_header_sorted.bed|awk '{print $1}')
        echo ${b}

#### Remove useless files
        if [ ${a} -gt ${b} ]; then
                rm ${outdir}/five_pirme/final_out/${i%%L1_1*}L1_2*
        else
                rm ${outdir}/five_pirme/final_out/${i%%L1_1*}L1_1*
        fi
done


## 9. Remove reads mapped to tRNA and rRNA

#Reads that mapped at tRNA and rRNA position are discarded:

for i in `ls  ${outdir}/five_pirme/final_out |grep "bed$"`
do
        bedtools subtract -a ${outdir}/five_pirme/final_out/${i} -b gencode_mm10_tRNA_rRNA_gene.bed > ${outdir}/five_pirme/final_out/${i%.*}_remove_trRNA.bed
done




































# Data processing for 3' data

#The workflows of data of scCAT-seq 3' and BAT-seq are similar. Here is the scCAT-seq 5' data processing workflow. To see detail imformation of BAT-seq data processing, please see `BAT-seq_3_data_processing.sh`.

## 0. Preparation

#Before process the data, we bulid some directory and move the script to `script_and_log` directory:


#### Create directory
mkdir ${outdir}/three_pirme
mkdir ${outdir}/three_pirme/3tail_read_with_tag
mkdir ${outdir}/three_pirme/3tail_read_with_tag_other_strand
mkdir ${outdir}/three_pirme/3tail_read_with_tag_other_strand_withA10_remain_A5
mkdir ${outdir}/three_pirme/mapping_output
mkdir ${outdir}/three_pirme/extract_uniquely_map
mkdir ${outdir}/three_pirme/split_plus_minus
mkdir ${outdir}/three_pirme/extract_mismatch
mkdir ${outdir}/three_pirme/final_out


## 1. Find reads with oligo(dT) primer

#Reads with oligo(dT) primer sequence at 5'. We define reads with oligo(dT) primer sequence at 5' as R1 reads. Oligo(dT) primers in scCAT-seq data are listed in `sample_list_tag.txt`:


for i in `ls ${fq_dir}`
do
        a=$(grep "${i}" sample_list_tag.txt|awk '{print $2}')
        if [[ ${a} =~ "4" ]]; then
                b=${a#*4}
                echo ${b}
                echo "GTGGTATCAACGCAGAGT....${b%%TTTTTTTTTTTTTTTTTTTT*}"
                cat ${fq_dir}/${i} | paste - - - - | grep "${b%%TTTTT*}TTTTT" | awk -v FS="\t" -v OFS="\n" '{print $1, $2, $3, $4}' > ${outdir}/three_pirme/3tail_read_with_tag/${i}_with_tag
        fi
done


#Output files are stored in `${outdir}/three_pirme/3tail_read_with_tag/`.

## 2. Find R2 reads

#Perl script `cmpfastq_pe.pl` is used to find R2 reads which its corresponding R1 reads with oligo(dT) primes:


#### Compare R1_with_tag to R2
for i in `ls ${outdir}/three_pirme/3tail_read_with_tag/ | grep "L1_1.fq_with_tag$"`
do
        perl cmpfastq_pe.pl ${outdir}/three_pirme/3tail_read_with_tag/${i} ${fq_dir}/${i%_1*}_2.fq
done

#### Compare R2_with_tag to R1
for i in `ls ${outdir}/three_pirme/3tail_read_with_tag/ | grep "L1_2.fq_with_tag$"`
do
        perl cmpfastq_pe.pl ${outdir}/three_pirme/3tail_read_with_tag/${i} ${fq_dir}/${i%_2*}_1.fq
done

#### Remove useless files
rm ${outdir}/three_pirme/3tail_read_with_tag/*out
rm ${fq_dir}/*unique.out
mv ${fq_dir}/*out ${outdir}/three_pirme/3tail_read_with_tag_other_strand/


#Output files are stored in `${outdir}/three_pirme/3tail_read_with_tag_other_strand/`.

## 3. Trim A10 but retain A5 at R2 reads

#To trim polyA at 3', we run:


for i in `ls ${outdir}/three_pirme/3tail_read_with_tag_other_strand`
do
        python find_A10_and_remain_A5.py  -i ${outdir}/three_pirme/3tail_read_with_tag_other_strand/${i} -o ${outdir}/three_pirme/3tail_read_with_tag_other_strand_withA10_remain_A5/${i}_withA10_remain_A5
done


#Output files are stored in `${outdir}/three_pirme/3tail_read_with_tag_other_strand_withA10_remain_A5/`.

## 4. Mapping

#For Mapping, we run:


for i in `ls ${outdir}/three_pirme/3tail_read_with_tag_other_strand_withA10_remain_A5/`
do
        STAR --runThreadN 24 --genomeDir ${star_dir} --genomeLoad LoadAndKeep --readFilesIn ${outdir}/three_pirme/3tail_read_with_tag_other_strand_withA10_remain_A5/${i} --outFileNamePrefix ${outdir}/three_pirme/mapping_output/${i}_ --outSAMtype SAM --outFilterMultimapNmax 1 --outFilterScoreMinOverLread 0.6 --outFilterMatchNminOverLread 0.6
done


#Output files are stored in `${outdir}/three_pirme/mapping_output/`.


## 5. Extract uniquely mapped reads

#We only select uniquely mapped reads, so we run:


for i in `ls ${outdir}/three_pirme/mapping_output/ |grep "sam"`
do
        samtools view ${outdir}/three_pirme/mapping_output/${i} | grep 'NH:i:1'$'\t''' > ${outdir}/three_pirme/extract_uniquely_map/${i}_extract_uniquely_map.sam
done


#Output files are stored in `${outdir}/three_pirme/extract_uniquely_map/`.


## 6. Split reads aligned to plus stand and minus strand

#For further filter, we run:


for i in `ls ${outdir}/three_pirme/extract_uniquely_map | grep "sam"`
do
#### Extract plus strand reads
        cat ${outdir}/three_pirme/extract_uniquely_map/${i} | awk '{FS=" "}{if ($2==0 || $2==256){print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10"\t"$11"\t"$12"\t"$13"\t"$14"\t"$15}}' > ${outdir}/three_pirme/split_plus_minus/${i}_plus

#### Extract minus strand reads
        cat ${outdir}/three_pirme/extract_uniquely_map/${i} | awk '{FS=" "}{if ($2==16 || $2==272){print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10"\t"$11"\t"$12"\t"$13"\t"$14"\t"$15}}' > ${outdir}/three_pirme/split_plus_minus/${i}_minus
done


#Output files are stored in `${outdir}/three_pirme/split_plus_minus/`.

## 7. Extract reads with mismatch at 3'

#We run:


for i in `ls ${outdir}/three_pirme/split_plus_minus | grep "extract_uniquely_map.sam_plus"`
do
#### Extract plus strand reads
        python extractmismatch_plus_3.py -i ${outdir}/three_pirme/split_plus_minus/${i} -o ${outdir}/three_pirme/extract_mismatch/${i}_extractmismatch

#### Extract minus strand reads
        python extractmismatch_minus_3.py -i ${outdir}/three_pirme/split_plus_minus/${i%_*}_minus -o ${outdir}/three_pirme/extract_mismatch/${i%_*}_minus_extractmismatch

#### Combine plus strand reads and minus strand reads
        cat ${outdir}/three_pirme/extract_mismatch/${i}_extractmismatch ${outdir}/three_pirme/extract_mismatch/${i%_*}_minus_extractmismatch > ${outdir}/three_pirme/extract_mismatch/${i%_*}_extractmismatch
done


#Oligo(dT) primers can also anneal to internal A-rich sequences, a phenomenon called internal priming, leading to the generation of artifact. If "AAAAA" aligned, reads are internal priming drivern artifacts. If "GGG" don't aligned, reads are supposed to contain true polyA site.

#Output files are stored in `${outdir}/three_pirme/extract_mismatch/`.


## 8. Convert SAM to BED

#As `BED` format file can be used as input for `CAGEr` R package, we generate `SAM` to `BED`:


for i in `ls ${outdir}/three_pirme/extract_mismatch | grep "sam_extractmismatch"`
do
#### Add header and convert to bam
        samtools view -b -T ${genome_fa} ${outdir}/three_pirme/extract_mismatch/${i} | samtools view -b > ${outdir}/three_pirme/final_out/${i}_add_header.bam

#### Sort
        samtools sort ${outdir}/three_pirme/final_out/${i}_add_header.bam -o ${outdir}/three_pirme/final_out/${i}_add_header_sorted.bam

#### Build bam index for visualization
        samtools index ${outdir}/three_pirme/final_out/${i}_add_header_sorted.bam

#### Convert bam into bed
        bedtools bamtobed -i ${outdir}/three_pirme/final_out/${i}_add_header_sorted.bam > ${outdir}/three_pirme/final_out/${i}_add_header_sorted.bed
done


#Output files are stored in `${outdir}/three_pirme/final_out/`.



## 9. Remove useless reads

#As the library is pair-end reads, we remove one side which doesn't contain TES information:


for i in `ls ${outdir}/three_pirme/final_out |grep "bed"|grep "L1_1"`
do
#### The first read count
        a=$(wc -l ${outdir}/three_pirme/final_out/${i}|awk '{print $1}')
        echo ${a}

#### The second read count
        b=$(wc -l ${outdir}/three_pirme/final_out/${i%%L1_1*}L1_2.fq-common.out_withA10_remain_A5_Aligned.out.sam_extract_uniquely_map.sam_extractmismatch_add_header_sorted.bed|awk '{print $1}')
        echo ${b}

#### Remove useless files
        if [ ${a} -gt ${b} ]; then
                rm ${outdir}/three_pirme/final_out/${i%%L1_1*}L1_2*
        else
                rm ${outdir}/three_pirme/final_out/${i%%L1_1*}L1_1*
        fi
done


## 10. Remove reads mapped to tRNA and rRNA

#Reads that mapped at tRNA and rRNA position are discarded:

for i in `ls  ${outdir}/three_pirme/final_out |grep "bed$"`
do
        bedtools subtract -a ${outdir}/three_pirme/final_out/${i} -b gencode_mm10_tRNA_rRNA_gene.bed > ${outdir}/three_pirme/final_out/${i%.*}_remove_trRNA.bed
done

